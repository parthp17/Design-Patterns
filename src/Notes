Strategy

-----------------------Singleton------------------------------
	
	Singleton design pattern is a class implementation that ensures at most one instance of the class is created through out the application.
It restricts the instantiation of class so that a single instance of the class exsists in the JVMs.
Singleton pattern is widely used in logging, drivers object, caching and thread pool.
java.lang.runtime

Implementation Strategy

1) private constructor - this ensures that initialization can only take place from within the class and not from any other class.

2) public static ClassName getInstance() -  this method provides an public interface to the singleton object of the ClassName. 
	Singleton object can be accessed or retrieved using this static method only.
	
3) private static ClassName objRef - this is the static reference(hence common for whole class) to singleton object, 
	to which the singleton object will be initialized if null and returned from getInstance method.
	
Sample code

Flavour 1 - Lazy initialization thread safe

Class Singleton
{
	private static Singleton objSingleton = null;
	
	private Singleton()
	{
	}
	public static Singleton getInstance()
	{
		if(objSingleton == null)
		{
			synchronized(Singleton.class)
			{
				if(objSingleton == null)
				{
					objSingleton = new Singleton();
				}
			}
		}
		return objSingleton;
	}
}

Flavour 2 - Eager initialization thread safe

Class Singleton
{
	private static final Singleton objSingleton = new Singleton();
	
	private Singleton()
	{
	}
	public static Singleton getInstance()
	{
		return objSingleton;
	}
}


-------------------------Builder---------------------------------------------


Pojo class with all private final data members.
private all arguments constructor
getters for all data memebers.

public static inner class Builder
has all memebers as pojo private and final
public no arg constructor
setter methods that returns current builder object after setting that data Member.
public build() method that returns Pojo invokes all arg constructor with its data memebers as args.


   

 
 